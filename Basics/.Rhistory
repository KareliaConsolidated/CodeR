# Taking a First Look at the Interface
# SHIFT + CTRL + C to add or remove comments
8 + 5
8 + 5
8 + 5
1:250 # Prints numbers 1 to 100 across several lines
print("Hello World") # Prints "Hello World" in Console
# Variables
x <- 1:5 # Put the numbers 1-5 in the variable x
x
y <- c(6, 7, 8, 9, 10) # Put the numbers 6-10 in y
y
a <- b <- c <- 3 # Multiple Assignments
x + y # Adds corresponsing elements in x and y
x * 2 # Multiplies each element in x by 2
# Google's R Style Guide
browseURL("https://google.github.io/styleguide/Rguide.html")
browseURL("https://google-styleguide.googlecode.com/svn/trunk/Rguide.xml")
rm(list = ls()) # Clean entire Workspace
# Taking a First Look at the Interface
# SHIFT + CTRL + C to add or remove comments
8 + 5 # Basic Math
1:250 # Prints numbers 1 to 100 across several lines
print("Hello World") # Prints "Hello World" in Console
# Variables
x <- 1:5 # Put the numbers 1-5 in the variable x
x # Displays the values in x
y <- c(6, 7, 8, 9, 10) # Put the numbers 6-10 in y
y
a <- b <- c <- 3 # Multiple Assignments
# Vector Math
x
y
x + y # Adds corresponsing elements in x and y
x * 2 # Multiplies each element in x by 2
# Google's R Style Guide
browseURL("https://google.github.io/styleguide/Rguide.html")
# Clean Up
rm(x) # Remove and Object from Workspace
rm(a, b) # Remove more than one
rm(list = ls()) # Clean entire Workspace
# Taking a First Look at the Interface
# SHIFT + CTRL + C to add or remove comments
8 + 5 # Basic Math
1:250 # Prints numbers 1 to 100 across several lines
print("Hello World") # Prints "Hello World" in Console
# Variables
x <- 1:5 # Put the numbers 1-5 in the variable x
x # Displays the values in x
y <- c(6, 7, 8, 9, 10) # Put the numbers 6-10 in y
y
a <- b <- c <- 3 # Multiple Assignments
# Vector Math
x
y
x + y # Adds corresponsing elements in x and y
x * 2 # Multiplies each element in x by 2
# Google's R Style Guide
browseURL("https://google.github.io/styleguide/Rguide.html")
rm(a, b) # Remove more than one
# Clean Up
rm(x) # Remove and Object from Workspace
rm(list = ls()) # Clean entire Workspace
# List of Packages
browseURL("http://cran.r-project.org/web/views/") # Opens CRAN Task Views in browser
browseURL("http://cran.stat.ucla.edu/web/packages/available_packages_by_name.html")
# See Current Packages
library() # Brings up editor list of installed packages.
search() # Shows packages that are currently loaded.
# To Install and use packages
install.packages("ggplot2")
# To Install and use packages
install.packages("ggplot2") # Downloads package from CRAN and installs in R
?install.packages
# To Make Package Available; Often used for loading in scripts.
library("ggplot2")
# To Make Package Available; Often used for loading in scripts.
library("ggplot2")
# Preferred for loading in functions; maybe better ?
require("ggplot2")
detach("package:ggplot2", unload = TRUE)
# Preferred for loading in functions; maybe better ?
require("ggplot2")
library(help = "ggplot2") # Brings up documentation in editor window
# Vignettes (Examples of Packages)
vignette(package = "grid")
# Vignettes (Examples of Packages)
vignette(package = "grid") # Brings up list of vignettes (examples) in editor window
browseVignettes(package = "grid")
browseVignettes() # HTML for all vignettes for currently installed packages.
?update.packages
# UPDATE PACKAGES
# In R Studio, Tools > Check for Package Updates
update.packages() # Checks for updates; do periodically
# By Default, all loaded packages are unloaded when R quits.
# Can also open Packages window and manually uncheck, or can use this code
# To Unload Pckages
detach("package:ggplot2", unload = TRUE)
# To Make Package Available; Often used for loading in scripts.
library("ggplot2")
# By Default, all loaded packages are unloaded when R quits.
# Can also open Packages window and manually uncheck, or can use this code
# To Unload Pckages
detach("package:ggplot2", unload = TRUE)
# To Permanently remove(delete) package.
install.packages("psytabs") # Adds Psytabs
remove.packages("psytabs")
# Using Builtin Datasets
?datasets
library(help = "datasets")
library(datasets)
# To Remove the Datasets Package
detach(package:datasets)
library(datasets)
# To see a list of available datasets
data()
# For Information on a Specific Dataset
?airmiles
# To load a dataset from the package into the Workspace
data("airmiles")
force(airmiles)
# To see the contents of the dataset
airmiles
view(airmiles)
# To see its "Structure"
str(airmiles)
fix(airmiles)
data("anscombe")
# Now a Dataset that has rows and columns
?anscombe
# See its Structure
str(anscombe)
View(anscombe)
View(anscombe)
# See its data
anscombe
rm(list = ls()) # Clean Up
# Create Sequential Data
x1 <- 0:10 # Assigns number 0 through 10 to x1
x1
x2
x2 <- 10:0 # Assigns number 10 through 0 to x2
x2
x3 <- seq(10) # Counts from 1 to 10
x3
?seq
x4 <- seq(30, 0, by = -3) # Counts down by 3
# Manually Enter Data
x5 <- c(5, 4, 1, 6, 7, 2, 2, 3, 2, 8) # Concatenate
x6 <- scan() # After running this command, go to console
# Hit return after each number
# Hit return twice to stop
x6
ls() # List Objects (Same as Workspace Viewer)
rm(list = ls()) # Clean Up
# EXCEL FILES
# Don't Do It !!
browseURL("http://cran.r-project.org/doc/manuals/R-data.html#Reading-Excel-spreadsheets")
# TEXT FILES
# Load a spreadsheet that has been saved as tab-delimited text file
# Need to give complete address to file
# This command gives an error on missing data, but works on complete data.
# "header = TRUE" means the first line is a header
trends.txt <- read.table("C:\Users\Anubhav\Desktop\R\GoogleTrends.txt",header = TRUE)
# TEXT FILES
# Load a spreadsheet that has been saved as tab-delimited text file
# Need to give complete address to file
# This command gives an error on missing data, but works on complete data.
# "header = TRUE" means the first line is a header
trends.txt <- read.table("C:/Users/Anubhav/Desktop/R/GoogleTrends.txt",header = TRUE)
# This works with missing data by specifying the separator: \t is for tabs, sep="," for commas. R converts missing to "NA"
trends.txt <- read.table("C:/Users/Anubhav/Desktop/R/GoogleTrends.txt", header = TRUE, sep = "\t")
View(trends.txt)
# CSV FILES
# Don't have to specify delimiters for missing data, because CSV means "Comma Separated Values"
trends.csv <- read.csv("C:/Users/Anubhav/Desktop/R/GoogleTrends.csv", header = TRUE)
View(trends.csv)
rm(list=ls()) # Clean Up
# Load Data
?UCBAdmissions
data("UCBAdmissions")
View(UCBAdmissions)
str(UCBAdmissions)
UCBAdmissions
# If we need to know, how many people were admitted and rejected
# The Problem
admit.fail <- (UCBAdmissions$Admit)
# Get Marginal Frequencies from Original Table
margin.table(UCBAdmissions, 1) # Admit
margin.table(UCBAdmissions, 2) # Admit
margin.table(UCBAdmissions, 2) # Gender
margin.table(UCBAdmissions, 3) # Dept
margin.table(UCBAdmissions)
# Save Marginals as New Table
admit.dept <- margin.table(UCBAdmissions, 3) # Dept
str(admit.dept)
barplot(admit.dept)
admit.dept
prop.table(admit.dept) # Show as Proportions
round(prop.table(admit.dept), 2) # Show as Proportions
round(prop.table(admit.dept), 2) * 100 # Give Percentages w/o decimal places
# Go from table to one row per case
admit1 <- as.data.frame.table(UCBAdmissions) # Coerces to Data Frame
admit1
admit2 <- lapply(admit1, function(x)rep(x,admit1$Freq)) # Repeats each row by Frequency
View(admit2)
admit2[["Freq"]]
admit3 <- as.data.frame(admit2) # Converts from list back to data frame
View(admit3)
View(admit2)
admit4 <- admit3[, -4] # Removes Fifth Column With Frequencies
View(admit4)
View(admit3)
View(admit4)
View(admit3)
# Or do it in One Go...
admit.rows <- as.data.frame(lapply(as.data.frame.table(UCBAdmissions), function(x)rep(x,as.data.frame.table(UCBAdmissions)$Freq)))[, -4]
View(admit.rows)
str(admit.rows)
admit.rows[1:10, ] # View First Ten Rows of Data (of 4526)
rm(list=ls()) # Clean Up Workspace
# R specifies color in several ways
?colors
# Color names
# R has names for 657 colors, arranged alphabetically except for white (first)
# "Gray" or "grey": either is acceptable
colors()  # Gives list of color names
# RColorBrewer
browseURL("http://colorbrewer2.org/")  # Uses Flash
install.packages("RColorBrewer")
require("RColorBrewer")
# Show all of the palettes in a graphics window
display.brewer.all()
n <- 5  # Number of bars needed
x <- c(rep(10, n))  # Creates n bars of uniform height
barplot(x, col = rainbow(n))  # Uses x and n
# Creating Bar Charts for Categorical Variables
# Help on Plots
?plot
# LOAD DATASETS PACKAGE
require("datasets")
# ONE ROW PER CASE
?chickwts
data("chickwts")
plot(chickwts$feed)
source('E:/Project/R/Datacamp/02_Intermediate_R/02_Loops.R', echo=TRUE)
while(ctr <= 7) {
print(paste("ctr is set to ", ctr))
ctr <- ctr + 1
}
# While Loop
ctr <- 0
source('E:/Project/R/Datacamp/02_Intermediate_R/02_Loops.R', echo=TRUE)
employee1 <- c(1,2,3,4)
employee1 <- c(1,2,3,4)
employee2 <- c(1,2,3,4)
employee3 <- c(1,2,3,4)
employee4 <- c(1,2,3,4)
li_df <- c(employee1,employee2,employee3,employee4)
li_df <- matrix(li_df, nrow=4, byrow = TRUE)
li_df <- data.frame(li_df
View(li_df)
View(li_df)
colnames(li_df) <- c('day1','day2','day3','day4')
View(li_df)
source('E:/Project/R/Datacamp/02_Intermediate_R/02_Loops.R', echo=TRUE)
# Working with Color
# Barplot
x <- c(12, 4, 21, 17, 13, 9)
barplot(x, col = 'slategray3')
# Specify Colors
barplot(x, col=colors()[102]) # Darkseagreen
# Can Convert Color Names to RGB with "col2rgb"
col2rgb("navyblue") # Yields (0, 0, 128)
barplot(x, col='#000000')
barplot(x, col = c("red","blue")) # Colors will Cycle
barplot(x, col=rainbow(6))
barplot(x, col=heat.colors(6))
barplot(x, col=terrain.colors(6))
barplot(x, col=topo.colors(6))
barplot(x, col = cm.colors(6))
palette("default")
palette()
rm(list=ls())
x <- c(rep(10, n))  # Creates n bars of uniform height
x <- rep(10, 5)
# LOAD DATASETS PACKAGE
require("datasets")
data("chickwts") # Load Data into Workspace
plot(chickwts$feed)
plot(chickwts$feed)
feeds <- table(chickwts$feed)
feeds
data("mtcars")
barplot(feeds) # Identical to plot(chickwts$feed)
barplot(feeds) # Identical to plot(chickwts$feed)
barplot(feeds[order(feeds, decreasing = TRUE)])
par(oma = c(1,1,1,1)) # Set Outside margins: b,l,t,r
par(mar = c(4,5,2,1)) # Set Outside margins: b,l,t,r
barplot(feeds[order(feeds)],
horiz = TRUE,
las = 1, # las gives orientation of axis labels
col = c("beige", "blanchedalmond", "bisque1","bisque2","bisque3","bisque4"),
border = NA,
main = "Frequencies of Different Feeds\nin chickwts Dataset", # \n = Line Break
xlab = "Number of Choices")
rm(list=ls())
weight <- table(chickwts$weight)
weights <- table(chickwts$weight)
barplot(weights[order(weight)])
barplot(weights[order(weights)])
barplot(weights[order(weights)], horiz=TRUE, las = 1 , col = c("beige", "blanchedalmond", "bisque1","bisque2","bisque3","bisque4"), border = NA, main = "Weights of Different Chicks Dataset", xlab ='Number of Weights')
# Creating Bar Charts for Categorical Variables
# Help on Plots
?plot
# LOAD DATASETS PACKAGE
require("datasets")
# ONE ROW PER CASE
?chickwts
data("chickwts") # Load Data into Workspace
plot(chickwts$feed)
feeds <- table(chickwts$feed)
feeds
barplot(feeds) # Identical to plot(chickwts$feed)
# To Put the bars in Descending Order, add "order":
barplot(feeds[order(feeds, decreasing = TRUE)])
# Customize the Chart
par(oma = c(1,1,1,1)) # Set Outside margins: b,l,t,r
par(mar = c(4,5,2,1)) # Set Outside margins: b,l,t,r
barplot(feeds[order(feeds)],
horiz = TRUE,
las = 1, # las gives orientation of axis labels
col = c("beige", "blanchedalmond", "bisque1","bisque2","bisque3","bisque4"),
border = NA,
main = "Frequencies of Different Feeds\nin chickwts Dataset", # \n = Line Break
xlab = "Number of Choices")
rm(list = ls())
setwd("E:/Project/R/Basics")
# Creating Pie Charts for Categorical Variables
# Load Datasets Package
require("datasets")
# ONE ROW PER CASE
data("chickwts")
# Create a table with frequencies
feeds <- table(chickwts$feed)
feeds
# Make the Pie Chart with the Defaults
pie(feeds)
# Modify the Pie Chart
pie(feeds[order(feeds, decreasing = TRUE)],
init.angle = 90, # Starts at 12o'clock instead of 3
clockwise = TRUE, # Default is FALSE
col = c('seashell', 'cadetblue2','lightpink','lightcyan','plum1','papayawhip'),
main='Pie Chart of Feeds from chickwts')
pie_a <- c(22,14,18,20,14,12)
pie_b <- c(20,18,16,18,16,12)
pie_c <- c(12,14,20,18,14,12)
# Changing graphical parameters for a minute
oldpar <- par()
par(mfrow = c(1,3), # Num. rows/cols
cex.main = 3) # Main title 3X Bigger
colors <- c("grey98", "grey90", "lightskyblue", "lightgreen", "grey98", "grey90")
pie(pie.a, main = "Pie A", col = colors)
pie(pie.b, main = "Pie B", col = colors)
pie(pie.c, main = "Pie C", col = colors)
pie.a <- c(22,14,18,20,14,12)
pie.b <- c(20,18,16,18,16,12)
pie.c <- c(12,14,20,18,14,12)
# Three pie charts side by side
# Is the green slice or blue slice bigger?
pie(pie.a, main = "Pie A", col = colors)
pie(pie.b, main = "Pie B", col = colors)
pie(pie.c, main = "Pie C", col = colors)
# Creating Pie Charts for Categorical Variables
# Load Datasets Package
require("datasets")
# ONE ROW PER CASE
data("chickwts")
# Create a table with frequencies
feeds <- table(chickwts$feed)
feeds
# Make the Pie Chart with the Defaults
pie(feeds)
# Modify the Pie Chart
pie(feeds[order(feeds, decreasing = TRUE)],
init.angle = 90, # Starts at 12o'clock instead of 3
clockwise = TRUE, # Default is FALSE
col = c('seashell', 'cadetblue2','lightpink','lightcyan','plum1','papayawhip'),
main='Pie Chart of Feeds from chickwts')
# The Problem with Pie Charts
# Three Data Sets
pie.a <- c(22,14,18,20,14,12)
pie.b <- c(20,18,16,18,16,12)
pie.c <- c(12,14,20,18,14,12)
# Changing graphical parameters for a minute
oldpar <- par()
par(mfrow = c(1,3), # Num. rows/cols
cex.main = 3) # Main title 3X Bigger
colors <- c("grey98", "grey90", "lightskyblue", "lightgreen", "grey98", "grey90")
?colors
# Three pie charts side by side
# Is the green slice or blue slice bigger?
pie(pie.a, main = "Pie A", col = colors)
pie(pie.b, main = "Pie B", col = colors)
pie(pie.c, main = "Pie C", col = colors)
# Three bar charts side by side
# Is the green bar or blue bar bigger?
barplot(pie.a, main = "Bar A", col = colors)
barplot(pie.b, main = "Bar B", col = colors)
barplot(pie.c, main = "Bar C", col = colors)
# CONCLUSION
# From R help on pie charts:
?pie
# Pie charts are a very bad way of displaying information.
# The eye is good at judging linear measures and bad at
# judging relative areas. A bar chart or dot chart is a
# preferable way of displaying this type of data.
#
# Cleveland (1985), page 264: âData that can be shown by
# pie charts always can be shown by a dot chart. This means
# that judgements of position along a common scale can be
# made instead of the less accurate angle judgements.â
# This statement is based on the empirical investigations
# of Cleveland and McGill as well as investigations by
# perceptual psychologists.
par(oldpar)  # Restore old graphical parameters
# Note that cin, cra, csi, cxy, and din are read-only
# parameters that were written to oldpar but cannot be
# rewritten; just ignore the warning messages for these.
?par
rm(list = lm())  # Clean up
source('E:/Project/R/Basics/11_Creating_Pie_Charts_For_Categorical_Variables.R', echo=TRUE)
rm(list = lm())  # Clean up
rm(list = lm())  # Clean up
rm(list = lm())  # Clean up
rm(list = lm())  # Clean up
